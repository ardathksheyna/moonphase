package org.jesgs.moonphase.ui;

import java.awt.Dimension;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.util.ResourceBundle;
import java.util.TimeZone;
import org.jesgs.moonphase.DrawMoonPhase;
import org.jesgs.moonphase.MoonFx;

/**
 *
 * @author Jess Green <jgreen@periscope.com>
 */
public class CurrentAgeFrame extends JFrame {

    /**
     * Creates new form CurrentAgeFrame
     */
    public CurrentAgeFrame() {
        jTxtPaneMoonData = new javax.swing.JTextPane();

        initMoonPhaseGraphic();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblCurrentDate = new javax.swing.JLabel();
        jLblMoonAge = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 100), new java.awt.Dimension(100, 100), new java.awt.Dimension(100, 100));
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtPaneMoonData = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jesgs/moonphase/ui/Bundle"); // NOI18N
        jLblCurrentDate.setText(bundle.getString("CurrentAgeFrame.jLblCurrentDate")); // NOI18N

        jLblMoonAge.setText(bundle.getString("CurrentAgeFrame.jLblMoonAge")); // NOI18N

        jlblValueCurrentDate.setText("jLabel3");

        jlblValueMoonAge.setText("jLabel4");

        jScrollPane1.setViewportView(jTxtPaneMoonData);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLblCurrentDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLblMoonAge))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jlblValueCurrentDate)
                            .add(jlblValueMoonAge)))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLblCurrentDate)
                            .add(jlblValueCurrentDate))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLblMoonAge)
                            .add(jlblValueMoonAge))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jLblCurrentDate.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurrentAgeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CurrentAgeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CurrentAgeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CurrentAgeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                CurrentAgeFrame ageFrame = new CurrentAgeFrame();

                ageFrame.initMoonPhaseGraphic();
                ageFrame.setVisible(true);

            }
        });
    }

    public void initMoonPhaseGraphic() {
        DrawMoonPhase jpMoonPhase = new DrawMoonPhase();
        MoonFx moonFx = new MoonFx();
        String longDateFormat = ResourceBundle.getBundle("org/jesgs/moonphase/ui/Bundle").getString("CurrentAgeFrame.currentDateLongFormat");
        SimpleDateFormat sdf = new SimpleDateFormat(longDateFormat);
        DecimalFormat df = new DecimalFormat();

        Calendar cal = Calendar.getInstance();
//        cal.setTimeInMillis(1383675917000L);
        moonFx.setDate(cal);

        double synodicAge = moonFx.getSynodicPhase();
        String phaseName = MoonPhaseNames.getPhaseName(synodicAge);
        df.applyLocalizedPattern("###,###,### miles");

        jlblValueCurrentDate.setText(sdf.format(cal.getTime()));
        jlblValueMoonAge.setText(phaseName);

        // output moon data
        String phaseData;
        SimpleDateFormat sdf2 = (SimpleDateFormat) sdf.clone();

        sdf.applyLocalizedPattern("k:mm a z");
        sdf2.applyLocalizedPattern("k:mm a z");
        sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
        phaseData = "Local Time: " + sdf.format(cal.getTime()) + "\r\n"
                  + "UTC: " + sdf2.format(cal.getTime()) + "\r\n"
                  + "Julian Date: " + moonFx.getJulianDate() + "\r\n"
                  + "Moon Age: " + synodicAge + "\r\n"
                  + "Angle: " + moonFx.getPhaseAngle(synodicAge) + "\r\n"
                  + "Percent Illuminated: " + Math.round(moonFx.getIlluminatedRatio(synodicAge) * 100) + "% \r\n"
                  + "Distance (mi): " + df.format(Math.round(moonFx.getDistanceInEarthRadii() * MoonFx.EARTH_RADIUS_MI)) + "\r\n";


        jpMoonPhase.setMoonFx(moonFx);
        jpMoonPhase.setAge(synodicAge);
        jpMoonPhase.setBounds(10, 10, 100, 100);
        jTxtPaneMoonData.setText(phaseData);

        getContentPane().add(jpMoonPhase);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLblCurrentDate;
    private javax.swing.JLabel jLblMoonAge;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTxtPaneMoonData;
    public final javax.swing.JLabel jlblValueCurrentDate = new javax.swing.JLabel();
    public final javax.swing.JLabel jlblValueMoonAge = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
}
